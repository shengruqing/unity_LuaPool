---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 123.
--- DateTime: 2023/3/30 4:37
---

require "core.pool.objectpool"
PoolManager = {}

function PoolManager:new(obj)   
    local o = {};
    setmetatable(o, self);
    self.__index = self;
    self:_init(obj)
    return o;
end

function PoolManager:_init(obj)
    --- 刷新清理时间 负数不清理
    self.RefreshTime = 15
    ---刷新是否进行中
    self._isCoroutines = false
    ---对象池挂载
    self._poolTransform = nil
    ---生成物Id和对应池子
    self._objectIdDict = {}
    ---对象池子
    self._objectPools = {}
    ---不活跃物体存放地点
    self._unActiveTransform = {}
    self:_awake(obj)
end

---拿到目标对象
function PoolManager:Get(prefab, position, rotation, root)
    local obj = self:_getPool(prefab):Get()
    if self._objectIdDict[obj:GetInstanceID()] == nil then
        self._objectIdDict[obj:GetInstanceID()] = self:_getPool(prefab)
    end
    obj:SetActive(true)
    if self.RefreshTime > 0 and not self._isCoroutines then
        self._isCoroutines = true
        self.co = coroutine.create(function()
            self:ClearObjectPool()
        end)
        assert(coroutine.resume(self.co))
        print("ObjectPool:开始刷新，定时清除不活跃对象")
    end
    if position ~= nil and rotation ~= nil and root ~= nil then
        obj.transform.position = position
        obj.transform.rotation = rotation
        obj.transform.parent = root
    end
    return obj
end

---释放目标对象
function PoolManager:Release(prefab)
    if self._objectIdDict[prefab:GetInstanceID()] == nil then
        error("不存在" .. prefab .. "相关对象池")
    end
    local value = self._objectIdDict[prefab:GetInstanceID()]
    local root = nil
    if self._unActiveTransform[value.PoolName] == nil then
        root = GameObject(value.PoolName)
        root.transform:SetParent(self._poolTransform)
        self._unActiveTransform[value.PoolName] = root
    end
    root = self._unActiveTransform[value.PoolName]
    prefab:SetActive(false)
    prefab.transform:SetParent(root.transform)
    value:Release(prefab)
    self._objectIdDict[prefab:GetInstanceID()] = nil
end

function PoolManager:_awake(obj)
    self._objectIdDict = {}
    self._objectPools = {}
    self._unActiveTransform = {}
    self._poolTransform = obj
end

---返回物体对应的池子
function PoolManager:_getPool(prefab)
    if self._objectPools[prefab] == nil then
        local pool = ObjectPool:new(function() return self:_instantiatePrefab(prefab) end)
        pool.PoolName = prefab.name
        self._objectPools[prefab] = pool
    end
    return self._objectPools[prefab]
end

function PoolManager:_instantiatePrefab(prefab)
    return UnityEngine.GameObject.Instantiate(prefab)
end

function PoolManager:ClearObjectPool()
    while true do
        if LuaUtil.table_leng(self._objectPools) ~= 0 then
            for i, v in pairs(self._objectPools) do
                if #v.UserDict == 0 and #v.UnUseList > 0 then
                    log("ObjectPool:" .. i .. "不活跃删除该池子")
                    local root = self._unActiveTransform[v.PoolName]
                    if root then
                        UnityEngine.GameObject.Destroy(root.gameObject);
                        self._unActiveTransform[v.PoolName] = nil
                    end
                    self._objectPools[v] = nil
                end
                if LuaUtil.table_leng(self._objectPools) == 0 then
                    self._isCoroutines = false;
                    self.co = nil
                    log("ObjectPool:清空池子，停止刷新");
                end
            end
        end
        coroutine.wait(self.RefreshTime)
    end
end
